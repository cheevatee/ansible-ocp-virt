---
- name: "Create vm by satellite pxe"
  hosts: all
  gather_facts: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Print the entire ansible_env dictionary
      debug:
        var: ansible_env
  
    - name: Debug show injected Satellite env vars
      debug:
        msg:
          - "FOREMAN_HOST      = {{ ansible_env.FOREMAN_HOST | default('undefined') }}"
          - "FOREMAN_USERNAME  = {{ ansible_env.FOREMAN_USERNAME | default('undefined') }}"
          - "FOREMAN_PASSWORD  = {{ ansible_env.FOREMAN_PASSWORD | default('undefined') }}"
          - "FOREMAN_VALIDATE_CERTS  = {{ ansible_env.FOREMAN_VALIDATE_CERTS | default('undefined') }}"

    - name: Set activationkey as comma-separated string
      ansible.builtin.set_fact:
        activationkey: "{{ host_activationkey
                          | replace('[', '')
                          | replace(']', '')
                          | replace(\"'\", '')
                          | replace(', ', ',') }}"

    - name: Print net_attach_def 1
      ansible.builtin.debug:
        msg:
          - "net_attach_def: {{ net_attach_def }}"
          - "interfaces: {{ interface_names }}"

    - block:
        - name: Normalize attach_list_str
          ansible.builtin.set_fact:
            attach_list_str: "{{ (net_attach_def is sequence) and (net_attach_def | join(',')) or (net_attach_def | string | trim('[] ')) }}"

        - name: Turn attach_list_str into list
          ansible.builtin.set_fact:
            attach_list_list: "{{ attach_list_str == '' and [] or attach_list_str.split(',') }}"

        - name: Derive interface names
          ansible.builtin.set_fact:
            interface_names: "{{ attach_list_list | map('split','/') | map('last') | list }}"

        - name: Print planned attachments
          ansible.builtin.debug:
            msg:
              - "net_attach_def: {{ net_attach_def }}"
              - "attachments: {{ attach_list_list }}"
              - "interfaces: {{ interface_names }}"
      when: net_attach_def != '' or net_attach_def != '[]'

    - name: Print net_attach_def 2
      ansible.builtin.debug:
        msg:
          - "net_attach_def: {{ net_attach_def }}"
          - "interfaces: {{ interface_names }}"

    - name: Load Jinja2 template into a variable
      ansible.builtin.set_fact:
        j2_content: "{{ lookup('template', 'virtualmachine-pxe-dynamic-interfaces.yml.j2') }}"

    - name: Print rendered J2 template
      ansible.builtin.debug:
        msg: "{{ j2_content }}"
                          
#    - name: Create host in Satellite
#      theforeman.foreman.host:
#        server_url:  "{{ ansible_env.FOREMAN_HOST }}"
#        username:    "{{ ansible_env.FOREMAN_USERNAME }}"
#        password:    "{{ ansible_env.FOREMAN_PASSWORD }}"
#        validate_certs: "{{ ansible_env.FOREMAN_VALIDATE_CERTS }}"
#        name: "{{ name }}.{{ fqdn }}"
#        organization: "{{ host_organization }}"
#        location: "{{ host_location }}"
#        hostgroup: "{{ host_hostgroup }}"
#        build: false
#        managed: false
#        interfaces_attributes:
#          - managed: false
#            provision: false
#      register: created_host

#    - name: Display created host details
#      debug:
#        var: created_host

    - name: Create VirtualMachine
      kubernetes.core.k8s:
        state: present
        template: virtualmachine-pxe-dynamic-interfaces.yml.j2
#        template: virtualmachine.yml.j2

    - name: Fetch br-isolated MAC from the VM spec
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine       # <— note: VirtualMachine, not VirtualMachineInstance
        name: "{{ name }}"
        namespace: "{{ namespace }}"
      register: vm_spec_info
    
    - name: Extract br-isolated MAC
      set_fact:
        br_iso_mac: >-
          {{
            (
              vm_spec_info.resources[0]
                .spec.template.spec.domain.devices.interfaces
              | selectattr('name','equalto','br-isolated')
              | list
            )[0].macAddress
          }}
    
    - name: Show br-isolated MAC
      debug:
        msg: "br-isolated MAC → {{ br_iso_mac }}"

    - name: Patch br-isolated bootOrder=2 (merge-patch+json, one line)
      uri:
        url: "{{ lookup('env','K8S_AUTH_HOST') }}/apis/kubevirt.io/v1/namespaces/{{ namespace }}/virtualmachines/{{ name }}"
        method: PATCH
        headers:
          Authorization: "Bearer {{ lookup('env','K8S_AUTH_API_KEY') }}"
          Content-Type: application/merge-patch+json
        body: '{"spec":{"template":{"spec":{"domain":{"devices":{"interfaces":[{"name":"br-isolated","bootOrder":2}]}}, "networks":[{"name":"default","pod":{}},{"name":"br-ex-network","multus":{"networkName":"telco-tiger/br-ex-network"}},{"name":"br-isolated","multus":{"networkName":"telco-tiger/br-isolated"}}]}}}}'
        status_code: 200
        validate_certs: false
    
    - name: Confirm patch applied – fetch VM
      uri:
        url: "{{ lookup('env','K8S_AUTH_HOST') }}/apis/kubevirt.io/v1/namespaces/{{ namespace }}/virtualmachines/{{ name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ lookup('env','K8S_AUTH_API_KEY') }}"
        return_content: yes
        status_code: 200
        validate_certs: false
      register: vm_after_patch
    
    - name: Show current bootOrder of br-isolated
      set_fact:
        br_iso_bo: >-
          {{
            (
              vm_after_patch.json.spec.template.spec.domain.devices.interfaces
              | selectattr('name','equalto','br-isolated')
              | list
            )[0].bootOrder
          }}
    
    - name: Confirmed bootOrder
      debug:
        msg: "br-isolated bootOrder is now {{ br_iso_bo }}"

#    - name: Wait for VM to be ready
#      kubernetes.core.k8s_info:
#        api_version: kubevirt.io/v1
#        kind: VirtualMachine
#        name: "{{ name }}"
#        namespace: "{{ namespace }}"
#      register: deploy_collection_vm
#      retries: 60
#      delay: 10
#      until:
#      - deploy_collection_vm.resources[0].status is defined
#      - deploy_collection_vm.resources[0].status.ready is true

#    - name: Wait for VM IP to be populated
#      kubernetes.core.k8s_info:
#        api_version: kubevirt.io/v1
#        kind: VirtualMachineInstance
#        name: "{{ name }}"
#        namespace: "{{ namespace }}"
#      register: deploy_collection_vmi
#      retries: 60
#      delay: 10
#      until: (deploy_collection_vmi.resources[0].status.interfaces[0]['ipAddress'] | default('')) | length > 0

    - name: Confirm VM is Running
      ansible.builtin.debug:
        msg: "Create VM {{ name }} completed"
