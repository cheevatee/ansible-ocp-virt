---
- name: Add network interface(s) to a KubeVirt VM and migrate after completion
  hosts: all
  gather_facts: false
  vars:
    name: test01            # VM name
    namespace: vms          # VM namespace
    net_attach_def: "[]"  # Could be "", a single def, or a Python-list string

  tasks:
    - block:
        - name: No attachments defined, create VM only
          ansible.builtin.debug:
            msg: "Create VM completed"
        - name: Exit play when no attachments
          meta: end_play
      when: net_attach_def == '' or net_attach_def == '[]'

    - name: Normalize attach_list_str
      ansible.builtin.set_fact:
        attach_list_str: "{{ (net_attach_def is sequence) and (net_attach_def | join(',')) or (net_attach_def | string | trim('[] ')) }}"

    - name: Turn attach_list_str into list
      ansible.builtin.set_fact:
        attach_list_list: "{{ attach_list_str == '' and [] or attach_list_str.split(',') }}"

    - name: Derive interface names
      ansible.builtin.set_fact:
        interface_names: "{{ attach_list_list | map('split','/') | map('last') | list }}"

    - name: Print planned attachments
      ansible.builtin.debug:
        msg:
          - "net_attach_def: {{ net_attach_def }}"
          - "attachments: {{ attach_list_list }}"
          - "interfaces: {{ interface_names }}"
          
    - name: Add network interface(s) via oc command
      uri:
        url: "{{ lookup('env','K8S_AUTH_HOST') }}/apis/kubevirt.io/v1/namespaces/{{ namespace }}/virtualmachines/{{ name }}"
        method: PATCH
        headers:
          Authorization: "Bearer {{ lookup('env','K8S_AUTH_API_KEY') }}"
          Content-Type: application/json-patch+json
        body: "{{ [
            {'op':'add','path':'/spec/template/spec/networks/-','value':{'name':interface_name,'multus':{'networkName':net_attach}}},
            {'op':'add','path':'/spec/template/spec/domain/devices/interfaces/-','value':{'name':interface_name,'bridge':{},'model':'virtio'}}
          ] | to_json }}"
        status_code: 200
        validate_certs: false
 #       validate_certs: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') | default('true') | bool }}"
      loop: "{{ attach_list_list | zip(interface_names) | list }}"
      loop_control:
        loop_var: pair
        label: "{{ pair[1] }}"
      vars:
        net_attach: "{{ pair[0] }}"
        interface_name: "{{ pair[1] }}"
      register: patch_results

    - name: Show patch results
      ansible.builtin.debug:
        var: patch_results

    - name: Delete the current VMI to trigger reboot
      kubernetes.core.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ name }}"
        namespace: "{{ namespace }}"
        state: absent
      when: patch_results.changed
      register: delete_vmi_result

    - name: Wait until VMI is terminated
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        namespace: "{{ namespace }}"
        name: "{{ name }}"
      register: vmi_info_stop
      until: vmi_info_stop.resources | length == 0
      retries: 10
      delay: 6

    - name: Wait for new VMI to be created and running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        namespace: "{{ namespace }}"
        name: "{{ name }}"
      register: vmi_info_start
      until: vmi_info_start.resources | length > 0 and vmi_info_start.resources[0].status.phase == 'Running'
      retries: 20
      delay: 6

    - name: Confirm VM restart status
      ansible.builtin.debug:
        msg:
          - "Delete VMI result: {{ delete_vmi_result }}"
          - "VM Status after reboot: {{ vmi_info_start.resources[0].status.phase }}"
      ansible.builtin.debug:
        msg:
          - "Delete VMI result: {{ delete_vmi_result }}"
          - "VM Status after reboot: {{ vmi_info_start.resources[0].status.phase }}"
