---
- name: Add network interface(s) to a KubeVirt VM and migrate after completion
  hosts: localhost
  gather_facts: false
  vars:
    name: test01            # VM name
    namespace: vms          # VM namespace
    net_attach_def: "[]"  # Could be "", a single def, or a Python-list string

  tasks:
    - block:
        - name: No attachments defined, create VM only
          ansible.builtin.debug:
            msg: "Create VM completed"
        - name: Exit play when no attachments
          meta: end_play
      when: net_attach_def == '' or net_attach_def == '[]'

    - name: Print original net_attach_def
      ansible.builtin.debug:
        var: net_attach_def

    - name: Normalize attach_list_str
      ansible.builtin.set_fact:
        attach_list_str: "{{ (net_attach_def is sequence) and (net_attach_def | join(',')) or (net_attach_def | string | trim('[] ')) }}"

    - name: Turn attach_list_str into list
      ansible.builtin.set_fact:
        attach_list_list: "{{ attach_list_str == '' and [] or attach_list_str.split(',') }}"

    - name: Derive interface names
      ansible.builtin.set_fact:
        interface_names: "{{ attach_list_list | map('split','/') | map('last') | list }}"

    - name: Show attachments planning
      ansible.builtin.debug:
        msg:
          - "Will attach: {{ attach_list_list }}"
          - "Interface names: {{ interface_names }}"

    - name: Patch VirtualMachine spec with new interfaces
      kubernetes.core.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ name }}"
        namespace: "{{ namespace }}"
        apply: yes
        force: yes
        definition:
          spec:
            template:
              spec:
                domain:
                  devices:
                    interfaces:
                      {% for idx in range(attach_list_list | length) %}
                      - name: "{{ interface_names[idx] }}"
                        bridge: {}
                        model: virtio
                      {% endfor %}
                networks:
                      {% for idx in range(attach_list_list | length) %}
                      - name: "{{ interface_names[idx] }}"
                        multus:
                          networkName: "{{ attach_list_list[idx] }}"
                      {% endfor %}
      register: patch_results

    - name: Show patch results
      ansible.builtin.debug:
        var: patch_results

    - name: Restart VM to apply interface changes
      block:
        - name: Stop the VM instance
          ansible.builtin.command:
            cmd: oc virt stop {{ name }} -n {{ namespace }} --grace-period=30

        - name: Start the VM instance
          ansible.builtin.command:
            cmd: oc virt start {{ name }} -n {{ namespace }}
      when: patch_results.changed
      register: restart_results

    - name: Show restart results
      ansible.builtin.debug:
        var: restart_results
      when: restart_results is defined
